Docker 

# Hello world. After installing docker run the hello-world image from dockerhub
docker container run hello-world


# In VSCode create a folder called docker. Create a subfolder called first-image. 
# In the subfolder, create a Dockerfile and enter the following. 
From nginx:latest
CMD echo "Hello from nginx"

#Build the docker image
docker build . -t first-image:1

#Run the first-image
docker run first-image:1

Challenge 1
Build an image using the latest alpine base image. Run echo "Hello from Alpine". Name the image myalpineimage with a tag of 2023.
Run a container with your image

Creating docker images
the copy command. the syntax is COPY Source Destination
# create a subfolder called copy. In it, create a Dockerfile. Create an index.html file in the same folder with some boilerplate code.Enter the following
FROM httpd:2.4
COPY . /usr/local/apache2/htdocs/

# build the image
docker build . -t mywebapp:1.0

# run a container from your image 
docker run -d --name mywebapp -p 8080:80 mywebapp:1.0

Example. Dockerize beachwave app

COPY vs ADD
ADD does the same thing as COPY with add having additional functionality. ADD copies from remote urls and tar folders
Create a subdirectory named ADD with the same files as the COPY directory. 
# tar the index.html file using the following command
tar -czvf website.tar.gz -C website

#The Dockerfile should look like this
FROM httpd:2.4
ADD website.tar.gz /usr/local/apache2/htdocs/

# build the image
docker build . -t mywebapp:2.0

# run a container from your image 
docker run -d --name mywebapp -p 8080:80 mywebapp:2.0

RUN vs CMD vs ENTRYPOINT
RUN: executes when the image is building
CMD and ENTRYPOINT: Executes when the container starts. Entry point determines the main process to run and CMD provides additional parameters to be passed into the ENTRYPOINT. the parameters for CMD can be overwritten.  

Create a new folder RCE
Create a Dockerfile

FROM alpine
RUN apk add python
CMD ["8.8.8.8"]
ENTRYPOINT [ "ping", "-t", "5" ]

#build the image
docker build . -t mywebapp:3.0

# run a container from your image 
docker run -d --name mywebapp -p 8080:80 mywebapp:3.0

# run a container from your image (Overwrite 8.8.8.8)
docker run mywebapp:3.0 4.4.4.4

EXPOSE Port
# Create a folder called Port with a Dockerfile
# Enter the following
FROM httpd:2.4
EXPOSE 80

#build the image
docker build . -t mywebapp:4.0

# run a container from your image 
docker run -d --name mywebapp -p 8080:80 mywebapp:4.0

If port fowarding is not done, a random port number will be allocated. Run docker container ls to view the container details. Use the port specified. 

Custom Dockerfile names
Create a folder named custom and place a file named Dockerfile.prod
FROM nginx:latest
CMD echo "Hello World"


docker build -f Dockerfile.prod . -t custom:1
docker build --file="Dockerfile.prod" . -t custom:2
docker build -f Dockerfile.prod /full/path/to/file -t custom:3
docker build -f Dockerfile.prod /full/path/to/file -t custom:4

docker build -f repo-url -t custom:1

Docker challenge 
Goal: create a webserver
Use an CentOS base image
Install the web server using: yum -y install httpd
Copy a tar file and extract in the relevant path: /var/www/html
Start the web server using: /usr/sbin/httpd
Pass in parameters: "-D" and "FOREGROUND"
Call the image: Challenge2
Runs on port: 80


FROM centos:latest
RUN yum -y install httpd
ADD webserver.tar.gz /var/www/html
CMD ["-D", "FOREGROUND"]
ENTRYPOINT [ "/usr/sbin/httpd" ]
EXPOSE 80

#build the image
docker build . -t challenge2:1

# run a container from your image 
docker run -d --name challenge2 -p 8080:80 challenge2:1

Viewing the images on our host
docker image ls

Delete an image
docker image rm image-name or image-hash

Delete all images
docker image rm $(docker image ls -aq)

Viewing running containers
docker container ls

Stop a container
docker container stop containerid

Stop all running containers
docker container stop $(docker container ls -aq)

Delete all containers from the container cache
docker container prune

Naming containers
docker run -d --name nginx -p 8080:80 nginx

Volume mounts
Attach a folder on the host to a container. We can save important files in it.
Attach webserver content to /var/www/html in httpd container

docker run -d --name webserver:1 -p 8080:80 -v /source/directory:/var/www/html webserver:1

Make changes to the html file in the source directory and refresh the page. 

Tagging
# to rename an image
docker tag myweb:1 mywebserver:latest

EXEC
# A way to enter a container and execute commands
docker container exec -it container-id /bin/bash

Alter the index.html file.
echo "Hello from inside the container" > index.html

Refresh the browser. 

Docker repositories
Create a new repository in hub.docker.com using the name of the app
In the terminal run docker login
Change the image tag
docker image push username/image-name:latest

delete the local image 
Pull the image from the repository

Advanced concepts in docker




